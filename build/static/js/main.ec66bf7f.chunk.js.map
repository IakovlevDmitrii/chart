{"version":3,"sources":["Example.jsx","index.js"],"names":["data","name","uv","pv","Gradient","lineName","color","average","reduce","sum","elem","length","dispersion","Math","pow","standardDeviation","sqrt","lineValues","map","maxValue","max","apply","lineHeight","min","middleLine","topLimit","lowerLimit","getData","Example","top","right","left","bottom","r","PureComponent","ReactDOM","render","document","getElementById"],"mappings":"4OAWMA,EAAO,CACV,CACGC,KAAM,SACNC,GAAI,IACJC,GAAI,MAEP,CACGF,KAAM,SACNC,GAAI,IACJC,GAAI,MAEP,CACGF,KAAM,SACNC,GAAI,IACJC,GAAI,MAEP,CACGF,KAAM,SACNC,GAAI,KACJC,GAAI,MAEP,CACGF,KAAM,SACNC,GAAI,KACJC,GAAI,MAEP,CACGF,KAAM,SACNC,GAAI,KACJC,GAAI,MAEP,CACGF,KAAM,SACNC,GAAI,KACJC,GAAI,OA2BJC,EAAW,YAA+B,IAA5BJ,EAA4B,EAA5BA,KAAMK,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAAY,EAvBhC,SAACN,EAAMK,GACpB,IAAME,EAAUP,EAAKQ,QAAQ,SAACC,EAAKC,GAChC,OAAOD,EAAMC,EAAKL,KAClB,GAAKL,EAAKW,OAEPC,EAAaZ,EAAKQ,QAAQ,SAACC,EAAKC,GACnC,OAAOD,EAAMI,KAAKC,IAAMJ,EAAKL,GAAYE,EAAU,KACnD,GAAKP,EAAKW,OAEPI,EAAoBF,KAAKG,KAAKJ,GAE9BK,EAAajB,EAAKkB,KAAI,SAAAR,GAAI,OAAIA,EAAKL,MACnCc,EAAWN,KAAKO,IAAIC,MAAM,KAAMJ,GAEhCK,EAAaH,EADFN,KAAKU,IAAIF,MAAM,KAAMJ,GAEhCO,EAAaL,EAAWZ,EAE9B,MAAO,CACJkB,UAAWD,EAAaT,GAAqBO,EAAa,IAC1DI,YAAaF,EAAaT,GAAqBO,EAAa,KAKhCK,CAAQ3B,EAAMK,GAAtCoB,EADsC,EACtCA,SAAUC,EAD4B,EAC5BA,WAEjB,OACG,iCAAgB,GAAE,UAAKrB,EAAL,YAAyB,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,OAAnE,UACG,sBAAM,OAAO,KAAK,UAAU,QAC5B,sBAAM,OAAM,UAAKoB,EAAL,KAAkB,UAAU,QACxC,sBAAM,OAAM,UAAKA,EAAL,KAAkB,UAAS,UAAKnB,KAC5C,sBAAM,OAAM,UAAKoB,EAAL,KAAoB,UAAS,UAAKpB,KAC9C,sBAAM,OAAM,UAAKoB,EAAL,KAAoB,UAAU,QAC1C,sBAAM,OAAO,OAAO,UAAU,YAKlBE,E,4JAClB,WACG,OACG,eAAC,IAAD,CACG,MAAO,IACP,OAAQ,IACR,KAAM5B,EACN,OAAQ,CACL6B,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GARd,UAWG,iCACG,cAAC,EAAD,CAAU,KAAMhC,EAAM,SAAU,KAAM,MAAO,YAC7C,cAAC,EAAD,CAAU,KAAMA,EAAM,SAAU,KAAM,MAAO,eAEnD,cAAC,IAAD,CAAe,gBAAgB,QAC/B,cAAC,IAAD,CAAO,QAAQ,SACf,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,CACG,KAAK,WACL,QAAQ,KACR,OAAO,mBACP,KAAK,EACL,UAAW,CAAEiC,EAAG,KAEnB,cAAC,IAAD,CACG,KAAK,WACL,QAAQ,KACR,OAAO,mBACP,KAAK,W,GAlCoBC,iBCnFrCC,IAASC,OAAO,cAAC,EAAD,IAAaC,SAASC,eAAe,W","file":"static/js/main.ec66bf7f.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\rimport {\r   LineChart,\r   Line,\r   XAxis,\r   YAxis,\r   CartesianGrid,\r   Tooltip,\r   Legend,\r} from 'recharts';\r\rconst data = [\r   {\r      name: 'Page A',\r      uv: 4000,\r      pv: 2400,\r   },\r   {\r      name: 'Page B',\r      uv: 3000,\r      pv: 1398,\r   },\r   {\r      name: 'Page C',\r      uv: 2000,\r      pv: 9800,\r   },\r   {\r      name: 'Page D',\r      uv: 2780,\r      pv: 3908,\r   },\r   {\r      name: 'Page E',\r      uv: 1890,\r      pv: 4800,\r   },\r   {\r      name: 'Page F',\r      uv: 2390,\r      pv: 3800,\r   },\r   {\r      name: 'Page G',\r      uv: 3490,\r      pv: 4300,\r   },\r];\r\rconst getData = (data, lineName) => {\r   const average = data.reduce( (sum, elem) => {\r      return sum + elem[lineName];\r   }, 0) / data.length;\r\r   const dispersion = data.reduce( (sum, elem) => {\r      return sum + Math.pow( (elem[lineName] - average), 2);\r   }, 0) / data.length;\r\r   const standardDeviation = Math.sqrt(dispersion);\r\r   const lineValues = data.map(elem => elem[lineName]);\r   const maxValue = Math.max.apply(null, lineValues);\r   const mimValue = Math.min.apply(null, lineValues);\r   const lineHeight = maxValue - mimValue;\r   const middleLine = maxValue - average;\r\r   return {\r      topLimit: (middleLine - standardDeviation) / lineHeight * 100,\r      lowerLimit: (middleLine + standardDeviation) / lineHeight * 100,\r   }\r};\r\rconst Gradient = ( {data, lineName, color} ) => {\r   const {topLimit, lowerLimit} = getData(data, lineName);\r\r   return (\r      <linearGradient id={`${lineName}Gradient`} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"100%\">\r         <stop offset=\"0%\" stopColor=\"red\" />\r         <stop offset={`${topLimit}%`} stopColor=\"red\" />\r         <stop offset={`${topLimit}%`} stopColor={`${color}`} />\r         <stop offset={`${lowerLimit}%`} stopColor={`${color}`} />\r         <stop offset={`${lowerLimit}%`} stopColor=\"red\" />\r         <stop offset=\"100%\" stopColor=\"red\" />\r      </linearGradient>\r   )\r};\r\rexport default class Example extends PureComponent {\r   render() {\r      return (\r         <LineChart\r            width={500}\r            height={300}\r            data={data}\r            margin={{\r               top: 5,\r               right: 30,\r               left: 20,\r               bottom: 5,\r            }}\r         >\r            <defs>\r               <Gradient data={data} lineName={'pv'} color={'#8884d8'} />\r               <Gradient data={data} lineName={'uv'} color={'#82ca9d'} />\r            </defs>\r         <CartesianGrid strokeDasharray=\"3 3\" />\r         <XAxis dataKey=\"name\" />\r         <YAxis />\r         <Tooltip />\r         <Legend />\r         <Line\r            type=\"monotone\"\r            dataKey=\"pv\"\r            stroke=\"url(#pvGradient)\"\r            dot={false}\r            activeDot={{ r: 8 }}\r         />\r         <Line\r            type=\"monotone\"\r            dataKey=\"uv\"\r            stroke=\"url(#uvGradient)\"\r            dot={false}\r         />\r      </LineChart>\r      );\r   }\r}\r","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Example from \"./Example\";\r\n\r\nReactDOM.render(<Example />, document.getElementById(\"root\"));"],"sourceRoot":""}